# Define build arguments
ARG ALPINE_VERSION=3.21
ARG GO_VERSION=1.25.0

# Stage 1: Build Shaka Packager
FROM alpine:${ALPINE_VERSION} AS shaka-packager-builder

# Install utilities, libraries, and dev tools.
RUN apk add --no-cache \
        bash curl git \
        bsd-compat-headers linux-headers \
        build-base cmake ninja python3

# Set Shaka Packager version as an argument
ARG SHAKA_PACKAGER_VERSION=v3.4.2

WORKDIR /usr/src/

# Clone the repository with the specified tag (using --depth 1 for faster clone)
RUN git clone --recursive --depth 1 --branch $SHAKA_PACKAGER_VERSION https://github.com/shaka-project/shaka-packager.git

# Build Shaka Packager (now in the correct directory)
WORKDIR /usr/src/shaka-packager

RUN rm -rf build # Ensure clean build
RUN cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -G Ninja
RUN cmake --build build/ --config Release --parallel

# Stage 2: Build Go packager-cli (unchanged)
FROM golang:${GO_VERSION}-alpine AS go-builder

WORKDIR /app
COPY . .

RUN go mod download
RUN go mod verify

RUN CGO_ENABLED=0 GOOS=$TARGETOS GOARCH=$TARGETARCH go build -o /packager-cli cmd/api/main.go

# Stage 3: Final container with tools available
FROM alpine:${ALPINE_VERSION}

# Install runtime dependencies (libstdc++ and python3)
RUN apk add --no-cache libstdc++ python3

# Copy Shaka Packager binaries to our final image.
COPY --from=shaka-packager-builder /usr/src/shaka-packager/build/packager/packager /usr/local/bin/
# COPY --from=shaka-packager-builder /usr/src/shaka-packager/build/packager/mpd_generator /usr/local/bin/
# COPY --from=shaka-packager-builder /usr/src/shaka-packager/build/packager/pssh-box.py /usr/local/bin/

# Copy pyproto directory, which is needed by pssh-box.py script. This line
# cannot be combined with the line above as Docker's copy command skips the
# directory itself. See https://github.com/moby/moby/issues/15858 for details.
# COPY --from=shaka-packager-builder /usr/src/shaka-packager/build/packager/pssh-box-protos /usr/local/bin/pssh-box-protos

# Copy Go packager-cli
COPY --from=go-builder /packager-cli /usr/local/bin/

EXPOSE 8080

# Set the entrypoint
ENTRYPOINT ["packager-cli"]

# To build multi-arch image, use the following command:
# docker buildx build --platform linux/arm64,linux/amd64 -t commands/packager-svc:latest \
#   --build-arg ALPINE_VERSION=3.21 \
#   --build-arg GO_VERSION=1.25.0 \
#   --build-arg SHAKA_PACKAGER_VERSION=v3.4.2 \
#   .
